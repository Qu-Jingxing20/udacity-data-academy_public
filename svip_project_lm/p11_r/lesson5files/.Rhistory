install.packages('swirl')
swirl()
library(swirl)
install.packages("swirl")
library(swirl)
install.packages('swirl')
library(swirl)
install.packages('swirl')
library(swirl)
install.packages('swirl')
library(swirl)
swirl()
qplot(x = friend_count, data = subset(pf, !is.na(gender)),binwidth = 10) + scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50)) + facet_wrap(~gender)
library(ggplot2)
qplot(x = friend_count, data = subset(pf, !is.na(gender)),binwidth = 10) + scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50)) + facet_wrap(~gender)
getwd()
list.files()
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
names(pf)
# install.packages('ggplot2')
library(ggplot2)
# name(pf)
qplot(x=dob_day, data=pf)
# qplot(x=dob_day, data=pf,bins=25)
qplot(x=dob_day, data=pf) + scale_x_continuous(breaks=1:31)
# qplot(x=dob_day, data=pf) + scale_x_discrete(breaks=1:31)
# 课程中是discrete，报错，根据报错信息：
# Error: StatBin requires a continuous x variable the x variable is discrete. Perhaps you want stat="count"?
# 改为continuous就好了
library(ggplot2)
qplot(x=dob_day, data=pf) + scale_x_continuous(breaks=1:31) + facet_wrap(~dob_month,ncol = 3)
qplot(x = friend_count, data = pf)
str(pf)
qplot(x=friend_count, data=pf, xlim = c(0,1000))
# 使用标尺完成这个任务
qplot(x=friend_count, data=pf) + scale_x_continuous(limits = c(0,1000))
# 你会输入哪个代码，创建按照性别的直方图平面？
# 将它增加到下列代码中。
qplot(x = friend_count, data = pf, binwidth = 25) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
# binwidth是区分，breaks定义的标尺显示
qplot(x = friend_count, data = pf, binwidth = 10) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50)) + facet_wrap(~gender)
qplot(x = friend_count, data = na.omit(pf), binwidth = 10) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50)) + facet_wrap(~gender)
table(pf$gender)
by(pf$friend_count, pf$gender, summary)
qplot(x = tenure, data = pf, binwidth = 30, color = I('black'), fill = I('#099DD9') )
qplot(x = tenure/365, data = pf, binwidth = .25, color = I('black'), fill = I('#F79420') ) + scale_x_continuous(breaks = seq(1,7,1), limits = c(0,7))
# tenure应该是使用时长，可以看出刚加入的还是占多数
qplot(x = tenure/365, data = pf, xlab = 'Numbers of users count in sample', ylab = 'Number of years users use', binwidth = .25, color = I('black'), fill = I('#F79420') ) + scale_x_continuous(breaks = seq(1,7,1), limits = c(0,7))
qplot(x = age, data = pf, binwidth = 1, color = I('black'), fill = I('orange')) + scale_x_continuous(breaks = seq(0,113,5))
summary(pf$age)
qplot(data = pf, x = friend_count)
summary(pf$friend_count)
summary(x = friend_count, data = pf)
library(ggplot2)
qplot(x = friend_count, data = subset(pf, !is.na(gender)),binwidth = 10) + scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50)) + facet_wrap(~gender)
qplot(x = friend_count, y = ..count../sum(..count..), data = subset(pf,!is.na(gender)), binwidth = 10, geom = 'freqpoly', color = gender) + scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50))
qplot(x = friend_count, y = count, data = subset(pf,!is.na(gender)), binwidth = 10, geom = 'freqpoly', color = gender) + scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50))
qplot(x = friend_count, y = ..count.., data = subset(pf,!is.na(gender)), binwidth = 10, geom = 'freqpoly', color = gender) + scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50))
qplot(x = friend_count, y = ..count.., data = subset(pf,!is.na(gender)), xlab = 'Friend Count', ylab = 'Proportion of Users with that friend count', binwidth = 10, geom = 'freqpoly', color = gender) + scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50))
qplot(x = friend_count, y = ..count.., data = subset(pf,!is.na(gender)), binwidth = 10, geom = 'freqpoly', color = gender) + scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50))
qplot(x = friend_count, y = ..count../sum(..count..), data = subset(pf,!is.na(gender)), xlab = 'Friend Count', ylab = 'Proportion of Users with that friend count', binwidth = 10, geom = 'freqpoly', color = gender) + scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50))
ggplot(aes(x = friend_count, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('好友数量') +
ylab('Percentage of users with that friend count')
ggplot(aes(x = friend_count, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('好友数量') +
ylab('Percentage of users with that friend count')
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10()
by(pf$www_likes, pf$gender, sum)
qplot(x = gender, y = friend_count, data = subset(pf, !is.na(gender)),geom = 'boxplot', ylim = c(0,1000))
qplot(x = gender, y = friend_count, data = subset(pf, !is.na(gender)),geom = 'boxplot') +  scale_y_continuous(limits = c(0,1000))
qplot(x = gender, y = friend_count, data = subset(pf, !is.na(gender)),geom = 'boxplot') +  coord_cartesian(ylim = c(0,100))
qplot(x = gender, y = friend_count, data = subset(pf, !is.na(gender)),geom = 'boxplot') +  coord_cartesian(ylim = c(0,1000))
qplot(x = gender, y = friend_count, data = subset(pf, !is.na(gender)),geom = 'boxplot') +  coord_cartesian(ylim = c(0,250))
qplot(x = gender, y = friendships_initiated, data = subset(pf, !is.na(gender)),geom = 'boxplot') +  coord_cartesian(ylim = c(0,150))
by(pf$friendships_initiated, pf$gender, summary)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
pf$mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
sum(pf$mobile_check_in == 1)/length(pf$mobile_check_in)
sum(pf$mobile_check_in == 1)/length(pf$mobile_check_in)
？diamounds
?diamonds
summary(diamonds)
data(DATA_SET_NAME)
data(data_set_name)
diamonds$color
str(diamonds)
qplot(x=..count.., y=price, data=pf)
qplot(x=..count.., y=price, data=diamonds)
data("diamonds")
qplot(x=..count.., y=price, data=diamonds)
qplot( y=price, data=diamonds)
qplot( x = price, y = ..count.., data=diamonds)
qplot( x = price, data=diamonds)
#当只指定一个坐标时，另一个坐标会默认，比如价格的默认就是count
summary(diamonds)
#钻石数量
by(diamonds$price < 500)
by(pf$friendships_initiated, pf$gender, summary)
#钻石数量
length(diamonds$price < 500)
length(diamonds$price < 250)
#钻石数量
length(diamonds$price < 500)
length(diamonds$price >= 500)
#钻石数量
count(diamonds$price < 500)
#钻石数量
subset(diamonds,$price < 500)
#钻石数量
subset(diamonds,price < 500)
#钻石数量
length(subset(diamonds,price < 500))
#钻石数量
length(subset(diamonds,price < 500))
#钻石数量
length(subset(diamonds,price < 250))
#钻石数量
summary(subset(diamonds,price < 250))
table(diamonds$price < 500)
table(diamonds$price < 250)
#钻石数量
#length(diamonds$price < 250)
#length的长度不做条件判断，都是一样多的
#subset比较奇怪，数量很小，后续研究
#直接使用table加条件
table(diamonds$price < 500)
table(diamonds$price < 250)
table(diamonds$price >= 15000)
table(diamonds$price > 15000)
table(diamonds$price >= 15000)
#钻石数量
#length(diamonds$price < 250)
#length的长度不做条件判断，都是一样多的
#subset比较奇怪，数量很小，后续研究
#直接使用table加条件
table(diamonds$price < 500)
table(diamonds$price < 250)
#散点图矩阵
install.packages(GGally)
install.packages(ggplot2)
install.packages(GGally)
#散点图矩阵
install.packages('GGally')
library(GGally)
theme_set(theme_minimal(20))
library(GGally)
#散点图矩阵
library(ggplot2)
theme_set(theme_minimal(20))
#set the seed for reproducible results
set.seed(1836)
pf_subset <- pf[, c(2:7)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset),])
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000), axisLabels = 'internal'])
ggpairs(pf_subset[sample.int(nrow(pf_subset), axisLabels = 'internal', 1000),])
ggpairs(pf_subset[sample.int(nrow(pf_subset, axisLabels = 'internal'), 1000),])
nci <- read.table("nci.tsv")
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
#练习带有分面和颜色的直方图
ggplot(aes(x = price, fill=cut), data = diamonds) + geom_histogram() +
facet_wrap(~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual')
#价格与按切工填色
ggplot(aes(x=table,y=price),data=diamonds)+
geom_point(aes(color=cut))+
scale_color_brewer(type = 'qual')+
scale_x_continuous(breaks=seq(50,80,2),lim=c(50,80))
ggplot(aes(x=table,y=price,fill=cut),data=diamonds)+
geom_point(aes(color=cut))+
scale_color_brewer(type = 'qual')+
scale_x_continuous(breaks=seq(50,80,2),lim=c(50,80))
#价格与体积和钻石净度
ggplot(aes(x = volume, y = price, color = clarity), data = diamonds) +
geom_point() +
scale_y_log10() +
xlim(0,quantile(diamonds$volume,0.99)) + scale_color_brewer(type = 'div')
View(diamonds)
#价格与体积和钻石净度
diamonds$volume <- diamonds$x * diamonds$y * diamonds$y
ggplot(aes(x = volume, y = price, color = clarity), data = diamonds) +
geom_point() +
scale_y_log10() +
xlim(0,quantile(diamonds$volume,0.99)) + scale_color_brewer(type = 'div')
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
#新建友谊的比赛
pf$prop_initiated <- pf$friendships_initiated/pf$friend_count
ggplot(pf, aes(x=tenure, y=prop_initiated, color=year_joined.bucket)) +
geom_line(stat='summary', fun.y=median, na.rm=TRUE)
pf$year_joined.bucket <- cut(pf$year_joined, c(2004, 2009, 2011, 2012, 2014))
summary(pf$year_joined)
pf$year_joined <- floor(2014 - pf$tenure/365)
summary(pf$year_joined)
table(pf$year_joined)
pf$year_joined.bucket <- cut(pf$year_joined, c(2004, 2009, 2011, 2012, 2014))
ggplot(pf, aes(x=tenure, y=prop_initiated, color=year_joined.bucket)) +
geom_line(stat='summary', fun.y=median, na.rm=TRUE)
ggplot(pf, aes(x=tenure, y=prop_initiated, color=year_joined.bucket)) +
geom_line(stat='summary', fun.y=median)
ggplot(pf, aes(x=tenure, y=prop_initiated, color=year_joined.bucket)) + geom_line(stat='summary', fun.y=median) + geom_smooth(aes(color = year_joined.bucket))
ggplot(pf, aes(x=tenure, y=prop_initiated, color=year_joined.bucket)) + geom_line(stat='summary', fun.y=median) + geom_smooth()
ggplot(pf, aes(x=tenure, y=prop_initiated, color=year_joined.bucket)) + geom_line(stat='summary', fun.y=median) + geom_smooth(aes(color = tenure))
#最大组均值
pf.tidy <- subset(pf,prop_initiated != 'NaN')
with(subset(pf.nan ,year_joined.bucket='(2012,2014]'),mean(prop_initiated))
with(subset(pf.tidy ,year_joined.bucket='(2012,2014]'),mean(prop_initiated))
with(subset(pf.tidy ,year_joined.bucket == '(2012,2014]'),mean(prop_initiated))
with(subset(pf.tidy ,year_joined.bucket == '(2012,2014)'),mean(prop_initiated))
with(subset(pf.tidy ,year_joined.bucket == '(2012,2014]'),mean(prop_initiated))
#bucket的判断需要使用(]后续研究
#也可以用by来实现
by(pf$prop_initiated, pf$year_joined.bucket, summary)
ggplot(aes(x = time, y = price), data = subset(yo, id %in% sample.ids)) + facet_wrap( ~id) + geom_line() + geom_point(aes(size = all.purchases), pch = 1)
#练习带有分面和颜色的直方图
#https://discussions.youdaxue.com/t/topic/43454/3
ggplot(aes(x = price, fill=cut), data = diamonds) + geom_histogram() +
facet_wrap(~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual')
#价格与按切工填色
#https://discussions.youdaxue.com/t/topic/52884
ggplot(aes(x=table,y=price),data=diamonds)+
geom_point(aes(color=cut))+
scale_color_brewer(type = 'qual')+
scale_x_continuous(breaks=seq(50,80,2),lim=c(50,80))
#练习带有分面和颜色的直方图
#https://discussions.youdaxue.com/t/topic/43454/3
ggplot(aes(x = price, fill=cut), data = diamonds) + geom_histogram() +
facet_wrap(~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual')
#练习：经过分组
ggplot(aes(x = price, fill=cut), data = diamonds) + geom_point() +
facet_wrap(~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual')
#练习：经过分组
ggplot(aes(x = cut, y = price/carat, fill=cut), data = diamonds) + geom_point() +
facet_wrap(~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual')
#练习：经过分组
ggplot(aes(x = cut, y = price/carat, fill=color), data = diamonds) + geom_point() +
facet_wrap(~ color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = cut, y = price/carat), data = diamonds) + geom_point()
ggplot(aes(x = cut, y = price/carat), data = diamonds) + geom_point() + scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) + geom_point() + facet_wrap(~ color) + scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) + geom_point() + facet_wrap(~ clarity) + scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) + geom_point(aes(color = cut)) + facet_wrap(~ clarity) + scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) + geom_point(aes(color = color)) + facet_wrap(~ clarity) + scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) + geom_jitter(aes(color = color)) + facet_wrap(~ clarity) + scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) + geom_jitter(aes(color = color), alpha = 1/20) + facet_wrap(~ clarity) + scale_color_brewer(type = 'div')
ggplot(diamonds, aes(x = carat, y = price)) + scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) + scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) + geom_point(fill = I('#F79420), color = I('black'), shape = 21 )
ggplot(diamonds, aes(x = carat, y = price)) + scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) + scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) + geom_point(fill = I('#F79420'), color = I('black'), shape = 21 )
#add liner model
ggplot(diamonds, aes(x = carat, y = price)) + stat_smooth(method = 'lm') + scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) + scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) + geom_point(fill = I('#F79420'), color = I('black'), shape = 21 )
#add liner model
ggplot(diamonds, aes(x = carat, y = price)) + stat_smooth(method = 'lm') + scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) + scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) + geom_point(fill = I('#F79420'), shape = 21 )
#add liner model
ggplot(diamonds, aes(x = carat, y = price)) + stat_smooth(method = 'lm') + scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) + scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) + geom_point(color = I('#F79420'), shape = 21 )
#add liner model
ggplot(diamonds, aes(x = carat, y = price)) + stat_smooth(method = 'lm') + scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) + scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) + geom_point(color = I('#F79420'))
#add liner model
ggplot(diamonds, aes(x = carat, y = price)) + stat_smooth(method = 'lm') + scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) + scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) + geom_point(color = I('#F79420'), alpha = 1/4)
#add liner model
ggplot(diamonds, aes(x = carat, y = price)) + scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) + scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) + geom_point(color = I('#F79420'), alpha = 1/4) + stat_smooth(method = 'lm')
#check packages
library(GGally)
library(scales)
library(memisc)
library(lattice)
library(MASS)
library(car)
library(reshape)
install.packages('memisc')
install.packages('car')
library(memisc)
library(car)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(gridExtra)
plot1 <- qplot() +
ggtitle('Price')
plot2 <- qplot() +
ggtitle('Price (log10)')
grid.arrange()
library(gridExtra)
plot1 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('orange')) + ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('blue')) + ggtitle('Price(log10)') + scale_x_log10()
grid.arrange(plot1, plot2, ncol = 2)
